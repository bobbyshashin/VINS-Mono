%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/camera/right/image_raw"
output_path: "/home/changsheng/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 752
image_height: 480
distortion_parameters:
   k1: -0.34677064
   k2: 0.08725212
   p1: 0.00054859
   p2: -0.00050751
projection_parameters:
   fx: 454.00359756
   fy: 454.66794443
   cx: 373.84806115
   cy: 245.8765547

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.99986162, -0.00822148, -0.01472684, 
           0.00773712, -0.99941761, 0.03323533, 
           -0.01446202, 0.03323533, 0.99934292]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.03672686622636394,-0.0050419585762031364, 0.015564851035262398]
#feature traker paprameters
max_cnt: 150 #150           # max feature number in feature tracking
min_dist: 30 #30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
##For UM7
# acc_n: 4e-03          # accelerometer measurement noise standard deviation. #0.2
# gyr_n: 8.72e-05         # gyroscope measurement noise standard deviation.     #0.05
# acc_w: 5e-04         # accelerometer bias random work noise standard deviation.  #0.02
# gyr_w: 4e-06       # gyroscope bias random work noise standard deviation.     #4.0e-5
# g_norm: 9.81007     # gravity magnitude
acc_n: 0.2          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.05         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.02         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude
#loop closure parameters
loop_closure: 1                 # start loop closure
load_previous_pose_graph: 0     # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/changsheng/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # 1: online estimate time offset between camera and imu
td: -0.022682804436155463                         # initial value of time offset. (unit: s). readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per line (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
